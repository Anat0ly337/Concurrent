package bank;import java.math.BigDecimal;import java.util.concurrent.ExecutorService;import java.util.concurrent.Executors;import org.apache.log4j.BasicConfigurator;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import bank.service.Operations;public class App {    static final Logger logger = LoggerFactory.getLogger(App.class);    public static void main(String[] args) {        BasicConfigurator.configure();        ExecutorService executorService = Executors.newSingleThreadScheduledExecutor();        Operations operations = new Operations();        executorService.submit(() -> {            for (int i = 0; i < 3; i++) {                operations.addMoney("JoeBiden",                    new BigDecimal(100));               logger.info("Money added");                try {                    Thread.sleep(300);                } catch (InterruptedException e) {                    throw new RuntimeException(e);                }            }            operations.notify();        });        executorService.submit(() -> {            for (int i = 0; i < 5; i++) {                operations.withdrawSum("JoeBiden", BigDecimal.valueOf(50));                try {                    Thread.sleep(500);                } catch (InterruptedException e) {                    throw new RuntimeException(e);                }            }        });        executorService.submit(() -> {            while (operations.getSum("JoeBiden").intValue() > 499) {                try {                    operations.wait();                    Thread.sleep(3000);                } catch (InterruptedException e) {                    throw new RuntimeException(e);                }            }           logger.info("Sum is= " + operations.getSum("JoeBiden").intValue());        });    }}