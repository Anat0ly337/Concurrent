package bank.service;import java.math.BigDecimal;import java.util.Set;import java.util.stream.Collectors;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import bank.Account;import bank.dao.InMemoryDB;public class Operations {    private static Logger logger = LoggerFactory.getLogger(Operations.class);    static Set<Account> db = InMemoryDB.accounts;    public synchronized void addMoney(String name, BigDecimal sum) {        logger.info("adding money");        db.stream()            .filter(acc -> acc.getUserName().equals(name))            .findFirst()            .stream().peek(account1 -> account1.setSum(                BigDecimal.valueOf(account1.getSum().intValue() + sum.intValue())))            .collect(Collectors.toList());    }    public synchronized BigDecimal getSum(String name) {        return db            .stream()            .filter(account -> account.getUserName().equals(name))            .findFirst()            .get()            .getSum();    }    public synchronized void withdrawSum(String name, BigDecimal value) {        logger.info("withDrawingSum method");        Account account = db.stream()            .filter(acc -> acc.getUserName().equals(name))            .findFirst()            .get();        if (account.getSum().intValue() < value.intValue()) {           // logger.info("Not enough money on account");            return;        }        db.stream()            .filter(acc -> acc.getUserName().equals(name))            .findFirst()            .stream().peek(account1 -> account1.setSum(                BigDecimal.valueOf(account1.getSum().intValue() - value.intValue())))            .collect(Collectors.toList());    }}